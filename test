/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */

"use client";

import clsx from "clsx";
import Link from 'next/link'
import { useSearchParams } from "next/navigation";
import { Fragment, useEffect, useState } from "react";
import { useRouter } from 'next/router';


import dummyData from "@/assets/dummy.json";

import { seeso } from "../../utils/seeso";
import useSWR from "swr";

type ImageToTextResult = typeof dummyData;

type HomePageProps = {
  searchParams: {
    calibrationData: string;
    imageUrl: string;

  }
}

export default function HomePage({searchParams}:HomePageProps) {
  // const router = useRouter();
  const {calibrationData, imageUrl} = searchParams
  // // 현재 경로에 'quiz'를 추가합니다.
  // const quizPath = `${router.asPath}/quiz`;


  const { data, isLoading } = useSWR(searchParams.imageUrl, async (url) => {
    const res = await fetch(
      "https://furiosa-server-vkfwbwiv6a-du.a.run.app/image-to-text",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ imageUrl: url }),
      },
    );

    const data = (await res.json()) as typeof dummyData;

    return data;
  });
  

  const [focusedId, setFocusedId] = useState<string>();

  const showGazeDotOnDom = (gazeInfo: any) => {
    const canvas = document.getElementById("seeso-canvas") as HTMLCanvasElement;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    const ctx = canvas.getContext("2d");

    if (ctx) {
      ctx.fillStyle = "#FF0000";
    }

    ctx?.clearRect(0, 0, canvas.width, canvas.height);
    ctx?.beginPath();
    ctx?.arc(gazeInfo.x, gazeInfo.y, 10, 0, Math.PI * 2, true);
    ctx?.fill();

    const currentFocusedId =
      isFinite(gazeInfo.x) &&
      isFinite(gazeInfo.y) &&
      (document.elementFromPoint(gazeInfo.x, gazeInfo.y) as HTMLSpanElement)
        ?.id;

    if (currentFocusedId && focusedId !== currentFocusedId) {
      setFocusedId(currentFocusedId);
    }
  };

  function hideGazeDotOnDom() {
    const canvas = document.getElementById("output") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d");
    ctx?.clearRect(0, 0, canvas.width, canvas.height);
  }

  useEffect(() => {
   
        const parsedConfig = JSON.parse(calibrationData);

        seeso.init(
          "dev_6rrd63vcmgu99crhz8h23l4vuode23n7os1g109q",
          async () => {
            seeso.setCalibrationData(parsedConfig);
            seeso.setCameraPosition(window.outerWidth / 2, true);
            seeso.startTracking(showGazeDotOnDom);
          }, // callback when init succeeded.
          () => console.log("callback when init failed."), // callback when init failed.
        );
   
  }, []);

  return (
    <main className={clsx("w-screen", "h-screen", "relative")}>
      <div className="navbar bg-base-100 h-[100px]">
      <div className="navbar-start">
        <div className="drawer-content">
          <label  htmlFor="my-drawer" className="btn btn-ghost btn-circle">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h7" /></svg>
          </label>
        </div>
      </div>
      <div className="navbar-center">
        <a className="btn btn-ghost text-5xl">EYENG</a>
      </div>
      <div className="navbar-end">
        <button className="btn btn-ghost btn-circle">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
        </button>
        <button className="btn btn-ghost btn-circle">
          <div className="indicator">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" /></svg>
            <span className="badge badge-xs badge-primary indicator-item"></span>
          </div>
        </button>
      </div>
    </div>
    <div className="relative mx-[150px] grid">
        <canvas
          id="seeso-canvas"
          className={clsx("absolute", "top-0", "left-0", "border")}
        ></canvas>
        
        <div
          className={clsx(
            "flex",
            "absolute",
            "inset-0",
            "p-10",
            "top-0",
            "flex-wrap",
            "gap-x-10",
            "gap-y-0",
            
          )}
        >
          {data?.sentences.map((sentence, s_index) => {
            return (
              <Fragment key={s_index}>
                {sentence.words.map((word, w_index) => {
                  const id = `sent-${s_index}-word-${w_index}`;

                  return (
                    <span
                      id={id}
                      key={w_index}
                      className={clsx(
                        "text-[3rem]",
                        "leading-[5rem]",
                        "font-semibold",
                        "cursor-pointer", 
                        "border-black",
                        id === focusedId && "bg-red-500",
                      )}
                    >
                      {word.word}
                    </span>
                  );
                })}
              </Fragment>
              
            );
          })}
          <button className=" w-[200px] h-[10px]">Quiz</button>
        </div>
        
        
        {/* <footer className="grid footer p-10 bdd
          <svg width="50" height="50" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fillRule="evenodd" clipRule="evenodd" className="fill-current"><path d="M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z"></path></svg>
          <p>ACME Industries Ltd.<br/>Providing reliable tech since 1992</p>
        </aside> 
        <nav>
          <header className="footer-title">Social</header> 
          <div className="grid grid-flow-col gap-4">
            <a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" className="fill-current"><path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"></path></svg></a>
            <a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" className="fill-current"><path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"></path></svg></a>
            <a><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" className="fill-current"><path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"></path></svg></a>
          </div>
        </nav>
      </footer> */}
      </div>
      
      <div className="drawer">
        <input id="my-drawer" type="checkbox" className="drawer-toggle" />
        <div className="drawer-side">
          <label htmlFor="my-drawer" aria-label="close sidebar" className="drawer-overlay"></label>
          
          <ul className="menu p-4 w-80 min-h-full bg-base-200 text-base-content">
            {/* Sidebar content here */}
            <h5 id="drawer-navigation-label" className="text-base font-semibold text-gray-500 uppercase dark:text-gray-400">Menu</h5>
            <li><Link href="/">Main Page</Link></li>
            <li><Link href="/quiz">Quiz</Link></li> 
          </ul>
        </div> 
      </div>

    
    
    </main>
    
    
  );
}
